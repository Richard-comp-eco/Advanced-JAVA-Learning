Lab 任务：多线程聊天室
任务 1：服务器端
启动服务器：

创建一个 ServerSocket 对象，绑定到指定端口（如 12345）。
让服务器在一个死循环中监听客户端的连接。
处理客户端连接：

每当一个客户端连接时，接受它的连接并创建一个新线程来处理它。
在线程中，使用 BufferedReader 和 PrintWriter 来读取客户端的消息并向它发送消息。
广播消息：

使用一个共享的数据结构（如 List 或 Set）存储所有客户端的输出流。
将一个客户端发送的消息广播到所有其他客户端。
处理客户端断开：

当客户端断开连接时，清理资源并从共享的数据结构中移除该客户端。
任务 2：客户端程序
连接到服务器：

使用 Socket 对象连接到服务器指定的 IP 和端口。
发送消息：

在主线程中，接受用户输入并通过 PrintWriter 将消息发送到服务器。
接收消息：

启动一个独立线程，用 BufferedReader 持续接收来自服务器的消息并打印到控制台。
处理断开：

如果服务器关闭连接，客户端应优雅退出。
任务 3：功能优化
添加用户名支持：

客户端连接时，先输入用户名，服务器将它与连接关联。
广播消息时，显示用户名（例如：[Alice]: Hello!）。
实现私聊功能：

定义私聊的消息格式（如 @username: message）。
解析消息后，直接将消息发送到目标用户，而不是广播给所有用户。
异常处理：

处理连接超时、客户端断开时抛出的异常。
添加服务器和客户端的日志记录功能。